Задача: Определить за О(1) является ли целое число степенью 2
Решение: n > 0 && (n & (n-1)) == 0

Задача: Не используя дополнительных переменных обменять два целых числа за О(1)
Решение: a ^= b
	 b ^= a
	 a ^= b

Задача: Удалить узел из односвязного списка по указателю на удаляемый элемент за O(1).
Решение: Быстрое решение - скопировать данные со следующего узла на удаляемый узел и удалить следующий узел. Что-то вроде следующего.

    // Найти следующий узел, используя следующий указатель
    struct Node * temp = node_ptr-> next;

    // Скопировать данные следующего узла на этот узел
    node_ptr-> data = temp-> data;

    // Отключить следующий узел
    node_ptr-> next = temp-> next;

    // Удалить следующий узел
    free(temp);
Но это не работает для последнего узла. При необходимости последний узел помечаем как "пустышка" и переделываем обрабатывающие функции

Задача: Проверить, является ли односвязный список кольцевым за O(n) времени и О(1) памяти.
Решение: Делаем два указателя на начало. Один указатель переходит на один узел вперед, а второй на два узла вперед. Если за n они не встретились, значит список не замкнут


Задача: Дано целое число. Вставить в него другое данное целое число с позиции i до позиции j в двоичном представлении за О(1)
Решение: a = 10101010, b = 111, i = 2, j = 5 
		mask = ((1<<j)-1) & ~((1<<i) - 1)
		result = a & ~mask | b<<i
	